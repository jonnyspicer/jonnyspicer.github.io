<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-20T20:09:56+01:00</updated><id>http://localhost:4000/</id><title type="html">Jonny Spicer | Thoughts From Tartarus</title><subtitle>Jonny Spicer's personal website and blog, where he writes about mental health, technology, esports, but primarily trash.</subtitle><entry><title type="html">Experiences with Jekyll</title><link href="http://localhost:4000/tartarus/2018/10/20/experiences-with-jekyll.html" rel="alternate" type="text/html" title="Experiences with Jekyll" /><published>2018-10-20T00:00:00+01:00</published><updated>2018-10-20T00:00:00+01:00</updated><id>http://localhost:4000/tartarus/2018/10/20/experiences-with-jekyll</id><content type="html" xml:base="http://localhost:4000/tartarus/2018/10/20/experiences-with-jekyll.html">&lt;p&gt;
  Having (finally) got round to rebuilding this site, I thought it would
  be nice to talk a little bit about the process of doing so, from learning
  Jekyll, to design, to development and deployment. All of them are,
  in the case of this site, pretty basic, given the basic nature of the
  site, but hey, I'm still fairly new at this.
&lt;/p&gt;
&lt;p&gt;
  My old site was Wordpress-hosted, which was frankly embarrassing. Aside
  from the limitations of this, not knowing that I'd written all of the
  code (in fact, having written none of the code whatsoever), didn't
  really make me feel like it was &lt;strong&gt;my&lt;/strong&gt; website. Sure,
  I could self-host Wordpress or some other PHP-based CMS and get my hands
  dirty in the source code if I wanted to, but a CMS would be overkill
  for this kind of site, and besides, I'm supposedly a developer, I ought
  not to need some shiny UI to manage my content.
&lt;/p&gt;
&lt;p&gt;
  Jekyll seemed like the obvious choice, mostly because of free hosting
  on Github Pages. I'm 90% sure I could host this site for free on AWS,
  but I haven't bothered to actually figure it out yet, so Pages is
  our home now, and Pages pushes Jekyll. I'd never used any SSG before,
  and seeing as Jekyll is #1 on &lt;a href=&quot;https://staticgen.com&quot;&gt;
  Staticgen,&lt;/a&gt; it seemed like a relatively easy choice. In retrospect,
  maybe I should've used a Javascript-based SSG rather than one which
  uses Ruby, which I know nothing about and in fact had to install
  on my home machine at the start of the project, but I don't have too
  much bad to say about Jekyll.
&lt;/p&gt;
&lt;p&gt;
  There were a few hiccoughs - I was pretty skeptical when installing the
  aforementioned Ruby for the first time, as I am growing increasingly wary of package
  managers exacerbating the problems they are supposedly meant to solve.
  The documentation for Jekyll isn't tooooo bad (nb, being a Drupal developer
  has forever changed the way I think about documentation. In my view,
  any documentation is good documentation...), and there is a decent
  enough SE community too. The two issues I ran into were kinda funny
  in the end - firstly I broke the automatic rerender on the local
  environment, and I still don't know how. For some reason, running
  &lt;code&gt;bundle update&lt;/code&gt; fixed it, but I am fairly sure I hadn't
  pulled or made any changes from the network at all between it working
  and it breaking... maybe I am just dumb. I also kept getting build
  errors when I deployed to Pages, despite my build working just fine
  locally. I know Pages builds in super-strict mode or whatever, but
  I had the &lt;code&gt;github-pages&lt;/code&gt; gem which is supposed to keep
  all your packages in-line with the ones on Pages. Turns out, having
  everything in a single directory underneath the repo root was breaking
  everything - lol.
&lt;/p&gt;
&lt;p&gt;
  Templating is obviously pretty natural for anyone who has ever done
  anything with a CMS before, so that bit was quite easy, and the syntax
  wasn't too hard. Liquid mostly makes sense too, it isn't immediately
  obvious that it's actually quite useful, but with some well placed
  search queries, you can dig up some nice how-tos for things like
  better excerpts (the default is a bit shit) and proper navigation.
  I am still curious as to why they call it &quot;front matter&quot;, but regardless
  of its name, fortunately I found it relatively intuitive also.
&lt;/p&gt;
&lt;p&gt;
  With regards to design, I am obviously no designer. In fact, not only
  am I &quot;no designer&quot;, I have no knowledge, no training, no experience -
  no nothing - of design. All I really have is reference points, and the ability
  as a user to say &quot;that's cool&quot; or &quot;that's kinda ugly&quot;. I wanted to focus
  on readability and good typesetting, inspired a little by iOS Safari's
  reader view, and the Kindle app. The content is meant to be the focus,
  and the rest of the page should not be distracting - take your time,
  read what is in front of you. I also wanted to fit in with what seems
  to be the trend in personal tech blogs - they have a minimalist feel,
  often with few or no images, default fonts, and generally they look
  like late 90s sites, even if the author clearly has the ability to
  bring them in line with 21st century trends. &lt;a href=&quot;http://paulgraham.com/lisp.html&quot; rel=&quot;noreferrer&quot;&gt;
  Paul Graham's site&lt;/a&gt; is a great example of this, and I love visiting it.
&lt;/p&gt;
&lt;p&gt;
  Part of the reason this site is monochrome is because I like it,
  but a much large part of the reason is that I was too scared to add
  colours. If I was going to have a primary colour for this site,
  it would have to represent my personality... which colour represents
  my personality (I'm a Scorpio if it helps)?
&lt;/p&gt;
&lt;p&gt;
  Trick question, the answer is black, the colour on the site.
&lt;/p&gt;
&lt;p&gt;
  There aren't any images (yet) either, despite the old site having
  a featured image on every post, and quite a few on the other pages.
  Part of this was due to the horrible way whichever Wordpress theme
  I was using would style images - it would left-align and then crop
  so they were less than the width-wrapper, I mean what the fuck - and
  a more important part is that now I see how much the quality of imagery
  has an effect on the quality of the site itself. So, no more shitty
  iPhone pictures. There will maybe be images at some point, if I can
  get some nice ones off &lt;a href=&quot;https://unsplash.com&quot; rel=&quot;noreferrer&quot;&gt;
  Unsplash&lt;/a&gt; or something.
&lt;/p&gt;
&lt;p&gt;
  The final piece of the puzzle that was deciding how to build this site
  was the one I actually think is coolest. You see... this site has no Javascript.
  Animated link underline? CSS. Accordions? CSS. Hamburger menu on mobile? CSS. Trackers?
  Don't have any. (If you want me to know you've read my post, you can find
  my email on the &lt;a href=&quot;//about/&quot;&gt;
  about page.&lt;/a&gt;) Admittedly, these are somewhat hack-y, Javascript
  could definitely do them better, and they are terrible for accessibility,
  but the tradeoff is better performance and a fully functioning website even
  with scripts disabled. I think a lot of developers ignore accessibility
  and that is a big problem, however I think a lot of developers also
  put far too much JS on all their pages and &lt;strong&gt;that killing the internet.&lt;/strong&gt;
  So, in the end, I think it is a trade worth making - perhaps in the future
  I could look at alternative ways of navigating the site, that would be
  more accessible.
&lt;/p&gt;
&lt;p&gt;
  It was fun to pick up a new technology, and I think the biggest takeaway
  I have from this site is that learning something new &lt;i&gt;should&lt;/i&gt; be fun,
  and in the process, expect to do badly, to write horrible code, to throw
  code away and start again. The SASS for this site is a fucking &lt;strong&gt;
  mess&lt;/strong&gt;, because I started writing it not even knowing what the
  file structure was going to look like, as I was learning on the fly. Sure,
  in a sense, that's bad, but spending 2 hours trying to map out my site
  without really even understanding the templating or page generation
  of sites, would've been worse. I definitely get struck by overplanning-paralysis
  as much as the next guy, but I am glad I didn't get too emotionally attached
  to anything I wrote at the beginning of this project (it's only SASS after all),
  so I had no problem ripping it out and starting again. To be honest it still
  needs ripping out and starting again, so I am going to put my refactoring
  hat on at some point this week.
&lt;/p&gt;
&lt;p&gt;
  I would say Jekyll is pretty neat overall. Of course it has some drawbacks,
  it cannot do some things you would expect or want it to do, for example
  there isn't an especially easy way to group or show posts by date, and
  the only way I have found of filtering by tag is to manually create a page
  for every tag and then link to it - I may have not been trying hard
  enough to find the solution though. If you're a developer, it's a pretty nice
  way to write a blog, it is relatively pain free and the flexibility is nice -
  just don't expect to expand too much or add any extra features.
&lt;/p&gt;
&lt;p&gt;
  In the future, I am hoping I can be constantly improving the site, be it
  the design, the performance or the content. I have a tonne of things left
  on my to do list for the site, such as adding blockquote element styling,
  better code element styling, and configuring the SEO tag module properly.
  I am hoping to write more entries for Thoughts from Tartarus, and I know I
  say that every time, but I have found writing daily especially cathartic
  recently, and I think I am slowly &quot;finding my voice&quot; again, so perhaps
  I will make good on my promise of more posts this time.
&lt;/p&gt;
&lt;p&gt;
  Who am I kidding. If you don't read Mendokusai, see you next year!
&lt;/p&gt;</content><author><name>Jonny Spicer</name></author><category term="Web Development" /><category term="Jekyll" /><summary type="html">Having (finally) got round to rebuilding this site, I thought it would be nice to talk a little bit about the process of doing so, from learning Jekyll, to design, to development and deployment. All of them are, in the case of this site, pretty basic, given the basic nature of the site, but hey, I'm still fairly new at this. My old site was Wordpress-hosted, which was frankly embarrassing. Aside from the limitations of this, not knowing that I'd written all of the code (in fact, having written none of the code whatsoever), didn't really make me feel like it was my website. Sure, I could self-host Wordpress or some other PHP-based CMS and get my hands dirty in the source code if I wanted to, but a CMS would be overkill for this kind of site, and besides, I'm supposedly a developer, I ought not to need some shiny UI to manage my content. Jekyll seemed like the obvious choice, mostly because of free hosting on Github Pages. I'm 90% sure I could host this site for free on AWS, but I haven't bothered to actually figure it out yet, so Pages is our home now, and Pages pushes Jekyll. I'd never used any SSG before, and seeing as Jekyll is #1 on Staticgen, it seemed like a relatively easy choice. In retrospect, maybe I should've used a Javascript-based SSG rather than one which uses Ruby, which I know nothing about and in fact had to install on my home machine at the start of the project, but I don't have too much bad to say about Jekyll. There were a few hiccoughs - I was pretty skeptical when installing the aforementioned Ruby for the first time, as I am growing increasingly wary of package managers exacerbating the problems they are supposedly meant to solve. The documentation for Jekyll isn't tooooo bad (nb, being a Drupal developer has forever changed the way I think about documentation. In my view, any documentation is good documentation...), and there is a decent enough SE community too. The two issues I ran into were kinda funny in the end - firstly I broke the automatic rerender on the local environment, and I still don't know how. For some reason, running bundle update fixed it, but I am fairly sure I hadn't pulled or made any changes from the network at all between it working and it breaking... maybe I am just dumb. I also kept getting build errors when I deployed to Pages, despite my build working just fine locally. I know Pages builds in super-strict mode or whatever, but I had the github-pages gem which is supposed to keep all your packages in-line with the ones on Pages. Turns out, having everything in a single directory underneath the repo root was breaking everything - lol. Templating is obviously pretty natural for anyone who has ever done anything with a CMS before, so that bit was quite easy, and the syntax wasn't too hard. Liquid mostly makes sense too, it isn't immediately obvious that it's actually quite useful, but with some well placed search queries, you can dig up some nice how-tos for things like better excerpts (the default is a bit shit) and proper navigation. I am still curious as to why they call it &quot;front matter&quot;, but regardless of its name, fortunately I found it relatively intuitive also. With regards to design, I am obviously no designer. In fact, not only am I &quot;no designer&quot;, I have no knowledge, no training, no experience - no nothing - of design. All I really have is reference points, and the ability as a user to say &quot;that's cool&quot; or &quot;that's kinda ugly&quot;. I wanted to focus on readability and good typesetting, inspired a little by iOS Safari's reader view, and the Kindle app. The content is meant to be the focus, and the rest of the page should not be distracting - take your time, read what is in front of you. I also wanted to fit in with what seems to be the trend in personal tech blogs - they have a minimalist feel, often with few or no images, default fonts, and generally they look like late 90s sites, even if the author clearly has the ability to bring them in line with 21st century trends. Paul Graham's site is a great example of this, and I love visiting it. Part of the reason this site is monochrome is because I like it, but a much large part of the reason is that I was too scared to add colours. If I was going to have a primary colour for this site, it would have to represent my personality... which colour represents my personality (I'm a Scorpio if it helps)? Trick question, the answer is black, the colour on the site. There aren't any images (yet) either, despite the old site having a featured image on every post, and quite a few on the other pages. Part of this was due to the horrible way whichever Wordpress theme I was using would style images - it would left-align and then crop so they were less than the width-wrapper, I mean what the fuck - and a more important part is that now I see how much the quality of imagery has an effect on the quality of the site itself. So, no more shitty iPhone pictures. There will maybe be images at some point, if I can get some nice ones off Unsplash or something. The final piece of the puzzle that was deciding how to build this site was the one I actually think is coolest. You see... this site has no Javascript. Animated link underline? CSS. Accordions? CSS. Hamburger menu on mobile? CSS. Trackers? Don't have any. (If you want me to know you've read my post, you can find my email on the about page.) Admittedly, these are somewhat hack-y, Javascript could definitely do them better, and they are terrible for accessibility, but the tradeoff is better performance and a fully functioning website even with scripts disabled. I think a lot of developers ignore accessibility and that is a big problem, however I think a lot of developers also put far too much JS on all their pages and that killing the internet. So, in the end, I think it is a trade worth making - perhaps in the future I could look at alternative ways of navigating the site, that would be more accessible. It was fun to pick up a new technology, and I think the biggest takeaway I have from this site is that learning something new should be fun, and in the process, expect to do badly, to write horrible code, to throw code away and start again. The SASS for this site is a fucking mess, because I started writing it not even knowing what the file structure was going to look like, as I was learning on the fly. Sure, in a sense, that's bad, but spending 2 hours trying to map out my site without really even understanding the templating or page generation of sites, would've been worse. I definitely get struck by overplanning-paralysis as much as the next guy, but I am glad I didn't get too emotionally attached to anything I wrote at the beginning of this project (it's only SASS after all), so I had no problem ripping it out and starting again. To be honest it still needs ripping out and starting again, so I am going to put my refactoring hat on at some point this week. I would say Jekyll is pretty neat overall. Of course it has some drawbacks, it cannot do some things you would expect or want it to do, for example there isn't an especially easy way to group or show posts by date, and the only way I have found of filtering by tag is to manually create a page for every tag and then link to it - I may have not been trying hard enough to find the solution though. If you're a developer, it's a pretty nice way to write a blog, it is relatively pain free and the flexibility is nice - just don't expect to expand too much or add any extra features. In the future, I am hoping I can be constantly improving the site, be it the design, the performance or the content. I have a tonne of things left on my to do list for the site, such as adding blockquote element styling, better code element styling, and configuring the SEO tag module properly. I am hoping to write more entries for Thoughts from Tartarus, and I know I say that every time, but I have found writing daily especially cathartic recently, and I think I am slowly &quot;finding my voice&quot; again, so perhaps I will make good on my promise of more posts this time. Who am I kidding. If you don't read Mendokusai, see you next year!</summary></entry><entry><title type="html">DEFCON</title><link href="http://localhost:4000/mendokusai/2018/10/19/defcon.html" rel="alternate" type="text/html" title="DEFCON" /><published>2018-10-19T00:00:00+01:00</published><updated>2018-10-19T00:00:00+01:00</updated><id>http://localhost:4000/mendokusai/2018/10/19/defcon</id><content type="html" xml:base="http://localhost:4000/mendokusai/2018/10/19/defcon.html">&lt;p&gt;
  My out of office is on for the next week. Knowing this is an &lt;i&gt;
  excellent&lt;/i&gt; feeling. To celebrate, I decided to have a couple of
  beers and enjoy an evening of watching Youtube videos and doing nothing
  productive (apart from writing the post), totally guilt-free.
&lt;/p&gt;
&lt;p&gt;
  After catching up with my boy &lt;a href=&quot;https://www.youtube.com/user/gustoonz&quot;&gt;
  Gus Johnson,&lt;/a&gt; the infamous algorithm recommended by a video from
  &lt;a href=&quot;https://www.youtube.com/channel/UC6Om9kAkl32dWlDSNlDS9Iw&quot;&gt;DEFCON,&lt;/a&gt;
  the hacker conference in Las Vegas. Back when I was 14, I thought it would
  be amazing to be a h4x0r, and so I knew the general schtick behind the event.
  The title was suitably clickbait-y, and like any dutiful millenial, click I did.
&lt;/p&gt;
&lt;p&gt;
  And it was excellent. A few hours later, and I am firmly down the rabbit
  hole. I now want to hack every single IoT device I can find. I want to
  script a twitter bot. I want to script that script, so I have an army
  of twitter bots. Having recently learned that Chrome 70 is implementing
  the Web Bluetooth API, I want to do the most obnoxious things possible with it.
&lt;/p&gt;
&lt;p&gt;
  I don't think I have really earned the right to comment on &quot;hacker culture&quot;
  or &quot;the hacker mentality&quot;, but I have huge admiration for the way in
  which the speakers at DEFCON went about solving their problems.
  They tried anything and everything, inside and outside the box, reshaping
  the box, redefining the box, heating and freezing the box, calling
  the box a cuboid just to see if it made any difference. They never
  gave up, even in the face of seemingly unsurmountable difficulties.
  In the end, they often did some good, in a roundabout way. And the
  whole process seemed a lot of fun.
&lt;/p&gt;
&lt;p&gt;
  BRB, rooting my brother's old Android...
&lt;/p&gt;</content><author><name>Jonny Spicer</name></author><category term="Hacking" /><category term="Technology" /><summary type="html">My out of office is on for the next week. Knowing this is an excellent feeling. To celebrate, I decided to have a couple of beers and enjoy an evening of watching Youtube videos and doing nothing productive (apart from writing the post), totally guilt-free. After catching up with my boy Gus Johnson, the infamous algorithm recommended by a video from DEFCON, the hacker conference in Las Vegas. Back when I was 14, I thought it would be amazing to be a h4x0r, and so I knew the general schtick behind the event. The title was suitably clickbait-y, and like any dutiful millenial, click I did. And it was excellent. A few hours later, and I am firmly down the rabbit hole. I now want to hack every single IoT device I can find. I want to script a twitter bot. I want to script that script, so I have an army of twitter bots. Having recently learned that Chrome 70 is implementing the Web Bluetooth API, I want to do the most obnoxious things possible with it. I don't think I have really earned the right to comment on &quot;hacker culture&quot; or &quot;the hacker mentality&quot;, but I have huge admiration for the way in which the speakers at DEFCON went about solving their problems. They tried anything and everything, inside and outside the box, reshaping the box, redefining the box, heating and freezing the box, calling the box a cuboid just to see if it made any difference. They never gave up, even in the face of seemingly unsurmountable difficulties. In the end, they often did some good, in a roundabout way. And the whole process seemed a lot of fun. BRB, rooting my brother's old Android...</summary></entry><entry><title type="html">Things that give me hope</title><link href="http://localhost:4000/mendokusai/2018/10/18/things-that-give-me-hope.html" rel="alternate" type="text/html" title="Things that give me hope" /><published>2018-10-18T00:00:00+01:00</published><updated>2018-10-18T00:00:00+01:00</updated><id>http://localhost:4000/mendokusai/2018/10/18/things-that-give-me-hope</id><content type="html" xml:base="http://localhost:4000/mendokusai/2018/10/18/things-that-give-me-hope.html">&lt;p&gt;
  Today I started a new Trello list, one that I'm excited about. It's
  titled &quot;Things that give me hope&quot;. It sounds a little intense, implying
  that I have very little hope outside of these few things, but given
  the current social climate, can you really blame me? I'm sure I will share
  more of the list in the future, but here is what I have so far;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://thecorrespondent.com&quot; rel=&quot;noreferrer&quot;&gt;The Correspondent&lt;/a&gt;
    - a new way of thinking about news journalism, with less corporate greed and
    more honesty and transparency. The English version is not yet live,
    but I am excited about it nonetheless, and I hope it lives up to its
    not unsubstantial promises.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://80000hours.org&quot; rel=&quot;noreferrer&quot;&gt;80000 Hours&lt;/a&gt; -
    research and evidence based career advice for people who want to
    have more job satisfaction and change the world for the better in
    the process.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;https://opensource.org&quot; rel=&quot;noreferrer&quot;&gt;Open Source&lt;/a&gt; -
    I have linked to the Open Source Initiative page, but OS is far more
    than that, it is a movement, and something that gives me a lot of hope
    in general. The fact that cyber-charity is such a big deal, and
    &quot;donating&quot; time and effort to it has very tangible career benefits,
    is one of the great advantages the computing industry has over others.
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jonny Spicer</name></author><category term="Personal" /><category term="Mental Health" /><summary type="html">Today I started a new Trello list, one that I'm excited about. It's titled &quot;Things that give me hope&quot;. It sounds a little intense, implying that I have very little hope outside of these few things, but given the current social climate, can you really blame me? I'm sure I will share more of the list in the future, but here is what I have so far; The Correspondent - a new way of thinking about news journalism, with less corporate greed and more honesty and transparency. The English version is not yet live, but I am excited about it nonetheless, and I hope it lives up to its not unsubstantial promises. 80000 Hours - research and evidence based career advice for people who want to have more job satisfaction and change the world for the better in the process. Open Source - I have linked to the Open Source Initiative page, but OS is far more than that, it is a movement, and something that gives me a lot of hope in general. The fact that cyber-charity is such a big deal, and &quot;donating&quot; time and effort to it has very tangible career benefits, is one of the great advantages the computing industry has over others.</summary></entry><entry><title type="html">Open Source Baby Steps</title><link href="http://localhost:4000/mendokusai/2018/10/17/open-source-baby-steps.html" rel="alternate" type="text/html" title="Open Source Baby Steps" /><published>2018-10-17T00:00:00+01:00</published><updated>2018-10-17T00:00:00+01:00</updated><id>http://localhost:4000/mendokusai/2018/10/17/open-source-baby-steps</id><content type="html" xml:base="http://localhost:4000/mendokusai/2018/10/17/open-source-baby-steps.html">&lt;p&gt;
  Today I am happy to announce I made my first open source contribution!
  Admittedly all I did was correct a handful of typos in the project docs,
  but nonetheless it felt good when my pull request got accepted. Even if
  this was not a contribution of any serious significance or skill, I am
  hoping that it marks the first of many, and will serve as a stepping stone
  towards making meaningful additions to bigger projects.
&lt;/p&gt;
&lt;p&gt;
  Thank you so much to David Pinheiro for being so kind with me and my
  first pull request. Check out &lt;a href=&quot;https://davrodpin.github.io/mole/&quot;&gt;
  Mole,&lt;/a&gt; a nifty CLI tool that allows easy creation of SSH tunnels.
&lt;/p&gt;</content><author><name>Jonny Spicer</name></author><category term="Open Source" /><category term="Web Development" /><summary type="html">Today I am happy to announce I made my first open source contribution! Admittedly all I did was correct a handful of typos in the project docs, but nonetheless it felt good when my pull request got accepted. Even if this was not a contribution of any serious significance or skill, I am hoping that it marks the first of many, and will serve as a stepping stone towards making meaningful additions to bigger projects. Thank you so much to David Pinheiro for being so kind with me and my first pull request. Check out Mole, a nifty CLI tool that allows easy creation of SSH tunnels.</summary></entry><entry><title type="html">Chess Players</title><link href="http://localhost:4000/mendokusai/2018/10/16/chess-players.html" rel="alternate" type="text/html" title="Chess Players" /><published>2018-10-16T00:00:00+01:00</published><updated>2018-10-16T00:00:00+01:00</updated><id>http://localhost:4000/mendokusai/2018/10/16/chess-players</id><content type="html" xml:base="http://localhost:4000/mendokusai/2018/10/16/chess-players.html">&lt;p&gt;
  Chess players are infuriating. Trying to organise them is like trying to
  herd cats. Trying to converse with them is like trying to draw blood from a
  stone. For a bunch of people capable of playing an immensely complex and
  nuanced game to a high level, they are almost universally idiots.
&lt;/p&gt;
&lt;p&gt;
  I am absolutely one of said idiots.
&lt;/p&gt;</content><author><name>Jonny Spicer</name></author><category term="Chess" /><summary type="html">Chess players are infuriating. Trying to organise them is like trying to herd cats. Trying to converse with them is like trying to draw blood from a stone. For a bunch of people capable of playing an immensely complex and nuanced game to a high level, they are almost universally idiots. I am absolutely one of said idiots.</summary></entry><entry><title type="html">Late Nights</title><link href="http://localhost:4000/mendokusai/2018/10/15/late-nights.html" rel="alternate" type="text/html" title="Late Nights" /><published>2018-10-15T00:00:00+01:00</published><updated>2018-10-15T00:00:00+01:00</updated><id>http://localhost:4000/mendokusai/2018/10/15/late-nights</id><content type="html" xml:base="http://localhost:4000/mendokusai/2018/10/15/late-nights.html">&lt;p&gt;
  Sleep is undoubtedly one of the most +EV things in life, and one which
  we all seem to wilfully disregard far too often. Tonight, I stayed up
  &quot;past my bedtime&quot; as it were, but did I achieve something meaningful
  because of it? I hope so...
&lt;/p&gt;
&lt;p&gt;
  On one hand, I finally managed to boot Ubuntu on my old laptop, after
  thinking I'd bricked the entire thing multiple times during the process.
  It's slow, but it's light and portable, and will make a nice machine
  to code on-the-go without shelling out a grand for a Macbook.
&lt;/p&gt;
&lt;p&gt;
  On another hand, I had a bizarre conversation with a girl... I have
  no idea if I really learned anything or if this was +EV. Relating
  to people and not PCs is definitely something I need to practise though,
  so I'll call this one a win.
&lt;/p&gt;
&lt;p&gt;
  Despite going to bed late, I still plan on getting up early tomorrow
  to try to smash through some more CS50. g0g0g0g0 me
&lt;/p&gt;</content><author><name>Jonny Spicer</name></author><category term="Wellbeing" /><summary type="html">Sleep is undoubtedly one of the most +EV things in life, and one which we all seem to wilfully disregard far too often. Tonight, I stayed up &quot;past my bedtime&quot; as it were, but did I achieve something meaningful because of it? I hope so... On one hand, I finally managed to boot Ubuntu on my old laptop, after thinking I'd bricked the entire thing multiple times during the process. It's slow, but it's light and portable, and will make a nice machine to code on-the-go without shelling out a grand for a Macbook. On another hand, I had a bizarre conversation with a girl... I have no idea if I really learned anything or if this was +EV. Relating to people and not PCs is definitely something I need to practise though, so I'll call this one a win. Despite going to bed late, I still plan on getting up early tomorrow to try to smash through some more CS50. g0g0g0g0 me</summary></entry><entry><title type="html">CS50</title><link href="http://localhost:4000/mendokusai/2018/10/14/cs50.html" rel="alternate" type="text/html" title="CS50" /><published>2018-10-14T00:00:00+01:00</published><updated>2018-10-14T00:00:00+01:00</updated><id>http://localhost:4000/mendokusai/2018/10/14/cs50</id><content type="html" xml:base="http://localhost:4000/mendokusai/2018/10/14/cs50.html">&lt;p&gt;
  Today I enrolled in Harvard's CS50x, the online version of its Introduction
  to Computer Science module. From what I can tell, CS50 basically covers
  all the actual computer science necessary for being a software engineer,
  and as such it is well respected within the industry.
&lt;/p&gt;
&lt;p&gt;
  I have heard the course is fairly hard, and knowing myself, I am
  somewhat worried that I will burn out, however I shelled out $90
  for a certificate at the end, so hopefully that will motivate me.
&lt;/p&gt;
&lt;p&gt;
  I completed problem set 0 today, which involved making a programme in
  Scratch, coincidentally enough the same language we use to teach
  10 year olds at Code Club. It was pretty fun, and I made something
  with some basic logic in, but the amount of repeating myself I did
  was pretty gross - if anyone has any suggestions for refactoring,
  they'd be greatly appreciated! You can see the project
  &lt;a href=&quot;https://scratch.mit.edu/projects/252383243/&quot;&gt;here.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
  Problem set 1 is based around C, somewhat at the other end of the
  spectrum to Scratch. Fortunately the basics at least vaguely resemble
  PHP, so I am not completely at sea (pun wholeheartedly intended), but
  I think it's going to ramp up pretty quickly. GL me.
&lt;/p&gt;</content><author><name>Jonny Spicer</name></author><category term="Computer Science" /><category term="Software Engineering" /><category term="CS50" /><summary type="html">Today I enrolled in Harvard's CS50x, the online version of its Introduction to Computer Science module. From what I can tell, CS50 basically covers all the actual computer science necessary for being a software engineer, and as such it is well respected within the industry. I have heard the course is fairly hard, and knowing myself, I am somewhat worried that I will burn out, however I shelled out $90 for a certificate at the end, so hopefully that will motivate me. I completed problem set 0 today, which involved making a programme in Scratch, coincidentally enough the same language we use to teach 10 year olds at Code Club. It was pretty fun, and I made something with some basic logic in, but the amount of repeating myself I did was pretty gross - if anyone has any suggestions for refactoring, they'd be greatly appreciated! You can see the project here. Problem set 1 is based around C, somewhat at the other end of the spectrum to Scratch. Fortunately the basics at least vaguely resemble PHP, so I am not completely at sea (pun wholeheartedly intended), but I think it's going to ramp up pretty quickly. GL me.</summary></entry><entry><title type="html">Egos at the Door</title><link href="http://localhost:4000/mendokusai/2018/10/13/egos-at-the-door.html" rel="alternate" type="text/html" title="Egos at the Door" /><published>2018-10-13T00:00:00+01:00</published><updated>2018-10-13T00:00:00+01:00</updated><id>http://localhost:4000/mendokusai/2018/10/13/egos-at-the-door</id><content type="html" xml:base="http://localhost:4000/mendokusai/2018/10/13/egos-at-the-door.html">&lt;p&gt;
  Today was another perfect example of why having an ego and being
  a programmer seem completely incompatible. This site is built
  only really using HTML and CSS - admittedly there is some templating
  and preprocessing done with Sass/Liquid etc - but it should still
  be easy enough.
&lt;/p&gt;
&lt;p&gt;
  I spent maybe two hours today staring at the mobile styling
  for this page. I had a regular desktop browser set to 375px
  wide, but everything was too small, and the DOM elements
  were telling me that there were bigger than they demonstrably were.
  &lt;code&gt;console.log(screen.width);&lt;/code&gt; returned 375px - what we'd
  expect. &lt;code&gt;console.log(document.querySelector('body').screenWidth);&lt;/code&gt;
  however, returned 980px, despite it clearly being visually
  less than the width of the device. I even hooked up an old
  android phone to my PC and &lt;a href=&quot;https://developer.android.com/studio/debug/dev-options&quot;&gt;
  installed developer options by tapping the build number 7 times.&lt;/a&gt; I had no joy whatsoever.
  What. The. Fuck.
&lt;/p&gt;
&lt;p&gt;
  Except not really what the fuck, because anyone who would so
  brazenly call themselves a web developer, as I have, would
  know that the first thing to check would be whether or not
  a meta value had been set for the viewport. I'm a clown.
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
  At least I am a clown who learned something, and I suspect
  this is the last time I make this mistake again - at the very
  least I hope it is the last time I waste nearly 2 hours trying
  to correct it. The relief when I could finally get media queries
  working correctly was palpable.
&lt;/p&gt;</content><author><name>Jonny Spicer</name></author><category term="Web Development" /><category term="Responsive Web Design" /><category term="Imposter Syndrome" /><summary type="html">Today was another perfect example of why having an ego and being a programmer seem completely incompatible. This site is built only really using HTML and CSS - admittedly there is some templating and preprocessing done with Sass/Liquid etc - but it should still be easy enough. I spent maybe two hours today staring at the mobile styling for this page. I had a regular desktop browser set to 375px wide, but everything was too small, and the DOM elements were telling me that there were bigger than they demonstrably were. console.log(screen.width); returned 375px - what we'd expect. console.log(document.querySelector('body').screenWidth); however, returned 980px, despite it clearly being visually less than the width of the device. I even hooked up an old android phone to my PC and installed developer options by tapping the build number 7 times. I had no joy whatsoever. What. The. Fuck. Except not really what the fuck, because anyone who would so brazenly call themselves a web developer, as I have, would know that the first thing to check would be whether or not a meta value had been set for the viewport. I'm a clown. At least I am a clown who learned something, and I suspect this is the last time I make this mistake again - at the very least I hope it is the last time I waste nearly 2 hours trying to correct it. The relief when I could finally get media queries working correctly was palpable.</summary></entry><entry><title type="html">Beautility</title><link href="http://localhost:4000/mendokusai/2018/10/12/beautility.html" rel="alternate" type="text/html" title="Beautility" /><published>2018-10-12T00:00:00+01:00</published><updated>2018-10-12T00:00:00+01:00</updated><id>http://localhost:4000/mendokusai/2018/10/12/beautility</id><content type="html" xml:base="http://localhost:4000/mendokusai/2018/10/12/beautility.html">&lt;p&gt;
  I have had a pretty ambivalent relationship with my phone for quite
  a while now. On one hand, all of us would struggle to forgo
  one altogether, given it is now a primary driver in almost all of
  our social and professional lives. Having the seemingly infinite
  wealth of human knowledge at my fingertips seems invaluable a lot of
  the time, especially when I'm trying to impress at dinner parties.
&lt;/p&gt;
&lt;p&gt;
  That was a joke. Obviously I don't get invited to parties, dinner
  or otherwise.
&lt;/p&gt;
&lt;p&gt;
  The point remains though - it is not exactly a hot take to suggest
  we are &quot;enslaved&quot; to our phones, or some other suitably sensational
  choice of phrase. I spend a decent amount of time on my phone, and
  quite a lot of that time I suspect does not really benefit me, often
  making me experience things negatively, eg the increasing-less-mild sense
  of nihilism I have whenever I read the news. So overall is my phone
  +EV for me, I should I, ever the contrarian-wannabe-hipster-douchebag,
  stop using me phone (and then immediately proceed to brag about it to everyone
  who'll listen)?
&lt;/p&gt;
&lt;p&gt;
  No. I am trying not to be &quot;that guy&quot;, and just admitting that I am
  millenial trash and that my iPhone dictates my life at this point.
  In the unending and naive quest to improve my life though, I discovered
  &lt;a href=&quot;https://betterhumans.coach.me/beautility-my-ultimate-iphone-setup-1b3dd0c588a0&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;
  this&lt;/a&gt;, a simple post with a few relatively straightforward ideas to
  change one's iOS habits, with big promises about how it would impact
  my use of the device. I set everything up tonight and it was about as
  easy as advertised - only 15 minutes or so in total. So far I am
  enjoying the new layout a lot more than the old one, although of course
  it is early days yet. Unlocking my phone to see basically nothing is
  a pretty good reminder that I should probably just lock my phone
  again and get on with something.
&lt;/p&gt;
&lt;p&gt;
  I'll report back next weekend with how I feel after a week in this
  new bleak, minimalistic mobile landscape.
&lt;/p&gt;</content><author><name>Jonny Spicer</name></author><category term="iOS" /><category term="Technology" /><summary type="html">I have had a pretty ambivalent relationship with my phone for quite a while now. On one hand, all of us would struggle to forgo one altogether, given it is now a primary driver in almost all of our social and professional lives. Having the seemingly infinite wealth of human knowledge at my fingertips seems invaluable a lot of the time, especially when I'm trying to impress at dinner parties. That was a joke. Obviously I don't get invited to parties, dinner or otherwise. The point remains though - it is not exactly a hot take to suggest we are &quot;enslaved&quot; to our phones, or some other suitably sensational choice of phrase. I spend a decent amount of time on my phone, and quite a lot of that time I suspect does not really benefit me, often making me experience things negatively, eg the increasing-less-mild sense of nihilism I have whenever I read the news. So overall is my phone +EV for me, I should I, ever the contrarian-wannabe-hipster-douchebag, stop using me phone (and then immediately proceed to brag about it to everyone who'll listen)? No. I am trying not to be &quot;that guy&quot;, and just admitting that I am millenial trash and that my iPhone dictates my life at this point. In the unending and naive quest to improve my life though, I discovered this, a simple post with a few relatively straightforward ideas to change one's iOS habits, with big promises about how it would impact my use of the device. I set everything up tonight and it was about as easy as advertised - only 15 minutes or so in total. So far I am enjoying the new layout a lot more than the old one, although of course it is early days yet. Unlocking my phone to see basically nothing is a pretty good reminder that I should probably just lock my phone again and get on with something. I'll report back next weekend with how I feel after a week in this new bleak, minimalistic mobile landscape.</summary></entry><entry><title type="html">Open Source</title><link href="http://localhost:4000/mendokusai/2018/10/11/open-source.html" rel="alternate" type="text/html" title="Open Source" /><published>2018-10-11T00:00:00+01:00</published><updated>2018-10-11T00:00:00+01:00</updated><id>http://localhost:4000/mendokusai/2018/10/11/open-source</id><content type="html" xml:base="http://localhost:4000/mendokusai/2018/10/11/open-source.html">&lt;p&gt;
  I was inspired today by &lt;a href=&quot;https://medium.freecodecamp.org/how-i-went-from-newbie-to-software-engineer-in-9-months-while-working-full-time-460bd8485847&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;
  this&lt;/a&gt; Medium article. I know inspiration will fade quickly, but
  I am hoping I can hold onto at least one thing from this article -
  it is never to late to start contributing to open source.
&lt;/p&gt;
&lt;p&gt;
  One of the reasons I am a web developer is because I care a lot
  about the internet - I want it to be fast, accessible, to connect
  people and to improve our lives. Contributing to open source
  technology might seem sinful to some people, particularly in
  other professions. Giving up my time and expertise, for free?
  Volunteering, but not for those in need, for other developers?
&lt;/p&gt;
&lt;p&gt;
  Well, in my infinite ignorance, I think it's a noble cause. To have
  the opportunity to contribute to a large, growing, evolving codebase
  would feel amazing, and I am hoping I will have that opportunity soon.
  Imagine when I get my first patch in a big project... It's going to feel
  like a huge achievement.
&lt;/p&gt;
&lt;p&gt;
  The article linked above says it's never to early to start contributing,
  and I suspect this is true, especially given I don't actually have to
  contribute code, nor do I have to contribute to a major library.
  There are some pretty massive projects out there with terrible documentation -
  Drupal, I am looking at you - so something like that seems like a natural
  place to start. Obviously I am not going to try to write documentation
  for Drupal though, because that would require understanding it, and honestly
  Drupal is nuts to me. My weekend homework (once this site is finished)
  is going to be researching the best way to start my open source journey -
  hopefully it is a long one.
&lt;/p&gt;</content><author><name>Jonny Spicer</name></author><category term="Open Source" /><category term="Web Development" /><category term="Technology" /><summary type="html">I was inspired today by this Medium article. I know inspiration will fade quickly, but I am hoping I can hold onto at least one thing from this article - it is never to late to start contributing to open source. One of the reasons I am a web developer is because I care a lot about the internet - I want it to be fast, accessible, to connect people and to improve our lives. Contributing to open source technology might seem sinful to some people, particularly in other professions. Giving up my time and expertise, for free? Volunteering, but not for those in need, for other developers? Well, in my infinite ignorance, I think it's a noble cause. To have the opportunity to contribute to a large, growing, evolving codebase would feel amazing, and I am hoping I will have that opportunity soon. Imagine when I get my first patch in a big project... It's going to feel like a huge achievement. The article linked above says it's never to early to start contributing, and I suspect this is true, especially given I don't actually have to contribute code, nor do I have to contribute to a major library. There are some pretty massive projects out there with terrible documentation - Drupal, I am looking at you - so something like that seems like a natural place to start. Obviously I am not going to try to write documentation for Drupal though, because that would require understanding it, and honestly Drupal is nuts to me. My weekend homework (once this site is finished) is going to be researching the best way to start my open source journey - hopefully it is a long one.</summary></entry></feed>